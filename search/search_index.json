{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About netID \u00b6 European netID Foundation \u00b6 The European netID Foundation (EnID) was founded in March 2018 by Mediengruppe RTL Deutschland, ProSiebenSat.1 and United Internet. Its aim is to establish the netID Single Sign-on as a European alternative to US providers. With netID, users can organize their privacy settings for digital services transparently and in compliance with data protection regulations. To this end, the foundation has developed an open standard that enables users from all sectors to access all internet services of partners of the European netID Foundation with the same login. Right from the start which focuses the initial core market Germany, 38 million accounts covering roughly about 60% of the Germany online population are ready to be used. netID Developer Portal \u00b6 The netID Developer Portal is the main resource for developers/digital services that want to leverage netID with their online services. It provides all the necessary resources and features to integrate the netID Single Sign-on. In the future, individual reports, information about planned further developments of the netID and much more will be available in the Developer Portal. For details see Developer Portal . netID Login Standard \u00b6 netID is the new, European login standard. The European netID Foundation provides the federated Single Sign-on \"netID\", which allows digital services (netID partners) to register and login netID Users based on their account at so called netID Account Provides. netID Partners can individually request authorized data transfer (profile information) via netID, whereas users get a centralized overview and control about which services they are using, and which data was/is transferred to each of them via netID. netID Account Providers are in charge for authentication, authorization and transfer of profile information, whereas the so called netID Broker, that is operated by the EnID, orchestrates data transfer and routing between users and the digital services they are using. Technically netID is based on the industry standard OpenID Connect, thus is easily and seamlessly usable by netID Partners. Based on the above, visitors and customers can discover and use your digital services and websites leveraging netID in a particularly secure, simple and convenient way. The netID Single Sign-on is provided free of charge and is open for anyone after registration and setup using the afore mentioned netID Developer Portal. For details see Single Sign-On Documentation . User base and advantages \u00b6 netID can be used with any e-mail address in general. Having that said over 35 million users can already use netID without further registration. This includes all e-mail users of the brands WEB.DE and GMX. Users who do not yet have a netID Account can create a free netID Account with one of the netID account providers with just a few clicks. Optimized & convenient : Fewer interruptions in the purchasing process, less \"password recovery\" effort. Significantly better conversion rates in the registration process for new customers. Free & Federated : Easy registration and free administration of your netID Developer Account with as many netID integrations as you wish. Secure & independent : Decentralized Data Storage. netID Partners are in full control of their (respectively their users) own first-party data. User base & convenience : Already more than 35 million users with existing netID Accounts. Typically not need for an additional registration for end-users.","title":"About netID"},{"location":"#about-netid","text":"","title":"About netID"},{"location":"#european-netid-foundation","text":"The European netID Foundation (EnID) was founded in March 2018 by Mediengruppe RTL Deutschland, ProSiebenSat.1 and United Internet. Its aim is to establish the netID Single Sign-on as a European alternative to US providers. With netID, users can organize their privacy settings for digital services transparently and in compliance with data protection regulations. To this end, the foundation has developed an open standard that enables users from all sectors to access all internet services of partners of the European netID Foundation with the same login. Right from the start which focuses the initial core market Germany, 38 million accounts covering roughly about 60% of the Germany online population are ready to be used.","title":"European netID Foundation"},{"location":"#netid-developer-portal","text":"The netID Developer Portal is the main resource for developers/digital services that want to leverage netID with their online services. It provides all the necessary resources and features to integrate the netID Single Sign-on. In the future, individual reports, information about planned further developments of the netID and much more will be available in the Developer Portal. For details see Developer Portal .","title":"netID Developer Portal"},{"location":"#netid-login-standard","text":"netID is the new, European login standard. The European netID Foundation provides the federated Single Sign-on \"netID\", which allows digital services (netID partners) to register and login netID Users based on their account at so called netID Account Provides. netID Partners can individually request authorized data transfer (profile information) via netID, whereas users get a centralized overview and control about which services they are using, and which data was/is transferred to each of them via netID. netID Account Providers are in charge for authentication, authorization and transfer of profile information, whereas the so called netID Broker, that is operated by the EnID, orchestrates data transfer and routing between users and the digital services they are using. Technically netID is based on the industry standard OpenID Connect, thus is easily and seamlessly usable by netID Partners. Based on the above, visitors and customers can discover and use your digital services and websites leveraging netID in a particularly secure, simple and convenient way. The netID Single Sign-on is provided free of charge and is open for anyone after registration and setup using the afore mentioned netID Developer Portal. For details see Single Sign-On Documentation .","title":"netID Login Standard"},{"location":"#user-base-and-advantages","text":"netID can be used with any e-mail address in general. Having that said over 35 million users can already use netID without further registration. This includes all e-mail users of the brands WEB.DE and GMX. Users who do not yet have a netID Account can create a free netID Account with one of the netID account providers with just a few clicks. Optimized & convenient : Fewer interruptions in the purchasing process, less \"password recovery\" effort. Significantly better conversion rates in the registration process for new customers. Free & Federated : Easy registration and free administration of your netID Developer Account with as many netID integrations as you wish. Secure & independent : Decentralized Data Storage. netID Partners are in full control of their (respectively their users) own first-party data. User base & convenience : Already more than 35 million users with existing netID Accounts. Typically not need for an additional registration for end-users.","title":"User base and advantages"},{"location":"faq/","text":"Frequently asked questions \u00b6 General \u00b6 What is netID? The European netID Foundation provides the federated Single Sign-on \"netID\", which allows digital services (netID partners) to register and login netID Users based on their account at so called netID Account Provides. netID Partners can individually request authorized data transfer (profile information) via netID, whereas users get a centralized overview and control about which services they are using, and which data was/is transferred to each of them via netID. What is the netID Developer Portal? The netID Developer Portal is the main resource for developers/digital services that want to leverage netID with their online services. It provides all the necessary resources and features to integrate the netID Single Sign-on. In the future, individual reports, information about planned further developments of the netID and much more will be available in the Developer Portal. Who can use the netID Developer Portal? All netID Partners who want to integrate the netID service into their application can use the netID Developer Portal. How much does the integration of the netID Single Sign-on service cost? The use of the netID Single Sign-on is free of charge. Developer Portal \u00b6 Where can I find information on using the Developer Portal? Please check the Getting Started Guide and the step by step Tutorials . How often are reports created? Reports are generated at daily intervals. How many days does a report cover? A report can contain a maximum of 366 days. The aggregates cover a rolling time frame (summarized to 1 day, 7 days, 30 days). Technical Integration \u00b6 Are there plugins for an easy integration of netID? There are several plugins for various popular CMS and e-Commerce systems. The number of supported systems is constantly growing. Are there SDKs or frameworks that I can use for netID integration? There are several implementations of OpenID Connect in different programming languages. More details can be found in the Single Sign-on Documentation . Is there an indicator for the system status? A Health Check report for the availability of the netID systems and subsystems is available in the netID Developer Portal. A login is required. Contact \u00b6 How can I get in contact with you? Please use our contact options in the Developer Portal or send us an e-mail: support@developer.netid.de How do I report a bug? Please use our contact options in the Developer Portal to inform us about a bug or to submit a feature request. How can I add my service to the partner page? The partner page is available at https://partner.netid.de/ . For further information please contact us at partnermanagement@netid.de .","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"faq/#general","text":"What is netID? The European netID Foundation provides the federated Single Sign-on \"netID\", which allows digital services (netID partners) to register and login netID Users based on their account at so called netID Account Provides. netID Partners can individually request authorized data transfer (profile information) via netID, whereas users get a centralized overview and control about which services they are using, and which data was/is transferred to each of them via netID. What is the netID Developer Portal? The netID Developer Portal is the main resource for developers/digital services that want to leverage netID with their online services. It provides all the necessary resources and features to integrate the netID Single Sign-on. In the future, individual reports, information about planned further developments of the netID and much more will be available in the Developer Portal. Who can use the netID Developer Portal? All netID Partners who want to integrate the netID service into their application can use the netID Developer Portal. How much does the integration of the netID Single Sign-on service cost? The use of the netID Single Sign-on is free of charge.","title":"General"},{"location":"faq/#developer-portal","text":"Where can I find information on using the Developer Portal? Please check the Getting Started Guide and the step by step Tutorials . How often are reports created? Reports are generated at daily intervals. How many days does a report cover? A report can contain a maximum of 366 days. The aggregates cover a rolling time frame (summarized to 1 day, 7 days, 30 days).","title":"Developer Portal"},{"location":"faq/#technical-integration","text":"Are there plugins for an easy integration of netID? There are several plugins for various popular CMS and e-Commerce systems. The number of supported systems is constantly growing. Are there SDKs or frameworks that I can use for netID integration? There are several implementations of OpenID Connect in different programming languages. More details can be found in the Single Sign-on Documentation . Is there an indicator for the system status? A Health Check report for the availability of the netID systems and subsystems is available in the netID Developer Portal. A login is required.","title":"Technical Integration"},{"location":"faq/#contact","text":"How can I get in contact with you? Please use our contact options in the Developer Portal or send us an e-mail: support@developer.netid.de How do I report a bug? Please use our contact options in the Developer Portal to inform us about a bug or to submit a feature request. How can I add my service to the partner page? The partner page is available at https://partner.netid.de/ . For further information please contact us at partnermanagement@netid.de .","title":"Contact"},{"location":"cmp/","text":"General information \u00b6 In addition to the Single Sign-on, netID Partners can also leverage netID to allow users to manage their overall privacy settings in terms of commercial data usage. This offers a convenient, scalable and most importantly server-based/permanent way to manage a user\u2019s consent status or more generally a status in terms of legal grounds for commercial data usage. To enable that netID (here specifically the netID Permission Center) provides the following services to integrate a netID Partners Consent Management Platform. Overall these APIs enable a Partner/his CMP to manage a TC-String associated to an individual user as well as netID specific consents (netID Permissions) which allow him to identity a user while using his services. In the following descriptions we will refer to the user\u2019s overall privacy setting as privacy status . All permissions (netID specific/TCF) stored/managed using netID are always scoped to an individual netID Partner. That means in terms of the CMP, that netID solely supports service scoped TC-Strings, and more importantly that the user\u2019s explicit consent to be identified is managed/given per netID Partner netID Permission Center Services \u00b6 The following services are provided by the netID Permission Center to allow a CMP to store / manage a user\u2019s privacy status for a specific netID Partner: READ SERVICE: Read the netID identifier (TPID), netID Permissions and TC Strings for an individual user WRITE SERVICE: Write netID Permissions and TC Strings for an individual user DATA EXPORT SERVICE: Export the netID permissions and TC strings for the respective netID Partner in general Read/Write Services \u00b6 The READ and WRITE services rely on prior user authenticating and are provided in two variants, with overall similar functionalities, to the netID Partners Consent Management Platform. Functionality \u00b6 Store and retrieve netID Permissions Store and retrieve the TC String Reading the netID identifier of a specific user (TPID) in case the user has consented Variants \u00b6 Browser based API: Usage based on an already established user authentication stored within the respective browser (ex-ante) Server based API: Usage based on a authentication token acquired via a Single Sign-on. The distinction browser vs. server-based refers mainly to how active users are authenticated prior to API usage/from where the APIs are being called. Call information: Parameters / Header / Cookies name type function description tapp_id parameter authentication is made available by netID for each publisher when it is onboarded on and must be passed unchanged with each request. origin header authentication is passed by the browser for each XMLHttpsRequest (AJAX). The value must be a URL registered for this netID Partner (TAPP). tpid_sec cookie user authentication/access token Only relevant for the browser-based API: is located in the netid.de domain and is automatically passed on by the browser - if available. token parameter user authentication/access token Only relevant for the server-based API: Can be retrieved by the partner via the SSO process, is passed to access the API/identify the user Data export service \u00b6 The export APIs allows a partner to export the netID Permissions/TC String as well as deltas on those. The APIs is available solely server based . Authentication for API usage \u00b6 Authentication of partners for the browser-based APIs is handled via the parameter tapp_id and the Origin header. Access is secured via CORS Multiple URLs are allowed per publisher (TAPP). Those URLs must be registered upfront The read/write request must be made from an eligible URL. Authentication with the server-based APIs is done as follows. The user-specific read/write access is secured via respective access tokens (authorization). Generic Data Export uses basic authentication User authentication when using APIs \u00b6 Authentication of the individual netID User is done depending on the API used by means of the tpid_sec (browser-based) or the token (server-based). tpid_sec is an ID Token (JWT) which is stored on the domain netid.de as part of the Single Sign-on session information for the provision of the netID service during login processes via the SSO/general login with the netID Account Provider. This token is not accessible for netID Partners / the CMP. The Login token can be retrieved by a netID Partner during the Single Sign-on process (OpenID Connect) in the form of a claim. This enables read/write access independently of the browser session (limited in time). If, depending on the context, the token or the tpid_sec does not exist, has expired or is invalid, a publisher cannot read/write the TC String and of course cannot access the TPID.","title":"General information"},{"location":"cmp/#general-information","text":"In addition to the Single Sign-on, netID Partners can also leverage netID to allow users to manage their overall privacy settings in terms of commercial data usage. This offers a convenient, scalable and most importantly server-based/permanent way to manage a user\u2019s consent status or more generally a status in terms of legal grounds for commercial data usage. To enable that netID (here specifically the netID Permission Center) provides the following services to integrate a netID Partners Consent Management Platform. Overall these APIs enable a Partner/his CMP to manage a TC-String associated to an individual user as well as netID specific consents (netID Permissions) which allow him to identity a user while using his services. In the following descriptions we will refer to the user\u2019s overall privacy setting as privacy status . All permissions (netID specific/TCF) stored/managed using netID are always scoped to an individual netID Partner. That means in terms of the CMP, that netID solely supports service scoped TC-Strings, and more importantly that the user\u2019s explicit consent to be identified is managed/given per netID Partner","title":"General information"},{"location":"cmp/#netid-permission-center-services","text":"The following services are provided by the netID Permission Center to allow a CMP to store / manage a user\u2019s privacy status for a specific netID Partner: READ SERVICE: Read the netID identifier (TPID), netID Permissions and TC Strings for an individual user WRITE SERVICE: Write netID Permissions and TC Strings for an individual user DATA EXPORT SERVICE: Export the netID permissions and TC strings for the respective netID Partner in general","title":"netID Permission Center Services"},{"location":"cmp/#readwrite-services","text":"The READ and WRITE services rely on prior user authenticating and are provided in two variants, with overall similar functionalities, to the netID Partners Consent Management Platform.","title":"Read/Write Services"},{"location":"cmp/#functionality","text":"Store and retrieve netID Permissions Store and retrieve the TC String Reading the netID identifier of a specific user (TPID) in case the user has consented","title":"Functionality"},{"location":"cmp/#variants","text":"Browser based API: Usage based on an already established user authentication stored within the respective browser (ex-ante) Server based API: Usage based on a authentication token acquired via a Single Sign-on. The distinction browser vs. server-based refers mainly to how active users are authenticated prior to API usage/from where the APIs are being called. Call information: Parameters / Header / Cookies name type function description tapp_id parameter authentication is made available by netID for each publisher when it is onboarded on and must be passed unchanged with each request. origin header authentication is passed by the browser for each XMLHttpsRequest (AJAX). The value must be a URL registered for this netID Partner (TAPP). tpid_sec cookie user authentication/access token Only relevant for the browser-based API: is located in the netid.de domain and is automatically passed on by the browser - if available. token parameter user authentication/access token Only relevant for the server-based API: Can be retrieved by the partner via the SSO process, is passed to access the API/identify the user","title":"Variants"},{"location":"cmp/#data-export-service","text":"The export APIs allows a partner to export the netID Permissions/TC String as well as deltas on those. The APIs is available solely server based .","title":"Data export service"},{"location":"cmp/#authentication-for-api-usage","text":"Authentication of partners for the browser-based APIs is handled via the parameter tapp_id and the Origin header. Access is secured via CORS Multiple URLs are allowed per publisher (TAPP). Those URLs must be registered upfront The read/write request must be made from an eligible URL. Authentication with the server-based APIs is done as follows. The user-specific read/write access is secured via respective access tokens (authorization). Generic Data Export uses basic authentication","title":"Authentication for API usage"},{"location":"cmp/#user-authentication-when-using-apis","text":"Authentication of the individual netID User is done depending on the API used by means of the tpid_sec (browser-based) or the token (server-based). tpid_sec is an ID Token (JWT) which is stored on the domain netid.de as part of the Single Sign-on session information for the provision of the netID service during login processes via the SSO/general login with the netID Account Provider. This token is not accessible for netID Partners / the CMP. The Login token can be retrieved by a netID Partner during the Single Sign-on process (OpenID Connect) in the form of a claim. This enables read/write access independently of the browser session (limited in time). If, depending on the context, the token or the tpid_sec does not exist, has expired or is invalid, a publisher cannot read/write the TC String and of course cannot access the TPID.","title":"User authentication when using APIs"},{"location":"cmp/browser-based/","text":"Browser-based API (Headless Integration) \u00b6 Description of the browser-based integration by the CMP (Headless CMP) API flow examples \u00b6 Obtaining a privacy status \u00b6 The following sequence illustrates the API calls initiated by a Partners CMP to establish a privacy status for an already authenticated user. Read APIs \u00b6 User identifier \u00b6 If the ORIGIN is eligible, a publisher (TAPP) can retrieve the user\u2019s identifier (TPID) via the following interface: GET https://READSERVICE.netid.de/identification/tpid?tapp_id = <TAPP_ID> Accept: application/vnd.netid.identification.tpid-read-v1+json Cookie: tpid_sec = <JWT_TOKEN> Origin: <ORIGIN> 200 OK Content-Type: application/vnd.netid.identification.tpid-read-v1+json Access-Control-Allow-Origin: <ORIGIN> Access-Control-Allow-Credentials: true { \"tpid\" : \"<TPID>|null\" \"status\" : \"OK|NO_TPID|TOKEN_ERROR|CONSENT_REQUIRED\" } JSON Properties Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. status meaning tpid OK Call successful x NO_TPID There was no tpid_sec cookie available. - TOKEN_ERROR Token (JWT) in the cookie has expired or is invalid. - CONSENT_REQUIRED Consent for passing on the TPID missing (\"Identification\"). - Privacy status \u00b6 GET https://READSERVICE.netid.de/permissions/iab-permissions? tapp_id = <TAPP_ID> Cookie: tpid_sec = <JWT_TOKEN> Origin: <ORIGIN> 200 OK Access-Control-Allow-Origin: <ORIGIN> Access-Control-Allow-Credentials: true { \"tpid\" : \"<TPID>|null\" , \"tc\" : \"<TC string>|null\" , \"status\" : \"OK|NO_TPID|TOKEN_ERROR|CONSENT_REQUIRED\" } JSON Properties Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. tc The TC string stored for this tpid for this publisher (TCF 2.0). Only with status \"OK\". Otherwise null. status meaning tc pid OK Status successfully retrieved x x NO_TPID There was no tpid_sec cookie available. - - TOKEN_ERROR Token (JWT) in the cookie has expired or is invalid. - - CONSENT_REQUIRED Consent for passing on the TPID missing (\"Identification\"). x - Write API \u00b6 Privacy status \u00b6 POST https://WRITESERVICE.netid.de/permissions/iab-permissions? tapp_id = <TAPP_ID> Cookie: tpid_sec = <JWT_TOKEN> Origin: <ORIGIN> { \"identification\" : \"true|false\" , \"tc\" : \"<TC string>\" } 201 CREATED Location: https://READSERVICE.netid.de/permissions/iab-permissions? tapp_id = <TAPP_ID> Access-Control-Allow-Origin: <ORIGIN> Access-Control-Allow-Credentials: true { \"tpid\" : \"<TPID>|null\" , \"status\" : \"OK|NO_TPID|TOKEN_ERROR\" } Remarks: If permission \"identification\" has been given by the user, this must be signaled by passing \"identification: true\". For the avoidance of doubt, this of course requires the prior collection of this consent by the CMP. If only the TC string is to be updated and the permission \"Identification\" already exists, only the \"tc\" attribute can be passed. Both can also be written at the same time. In case of revocation of permission \"Identification\", would pass only \"identification: false\". JSON Properties request Description identification Boolean flag, indicating the status of the permission \"Identification\". Yes = Consent given No = consent not given / revoked tc The TC String which should be stored for this this user in relation to the netID Partner (TCF 2.0) response Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. status meaning OK TC String / ID CONSENT was saved. NO_TPID There was no tpid_sec cookie available. TOKEN_ERROR Token (JWT) in the cookie has expired or is invalid.","title":"Browser-based API (Headless Integration)"},{"location":"cmp/browser-based/#browser-based-api-headless-integration","text":"Description of the browser-based integration by the CMP (Headless CMP)","title":"Browser-based API (Headless Integration)"},{"location":"cmp/browser-based/#api-flow-examples","text":"","title":"API flow examples"},{"location":"cmp/browser-based/#obtaining-a-privacy-status","text":"The following sequence illustrates the API calls initiated by a Partners CMP to establish a privacy status for an already authenticated user.","title":"Obtaining a privacy status"},{"location":"cmp/browser-based/#read-apis","text":"","title":"Read APIs"},{"location":"cmp/browser-based/#user-identifier","text":"If the ORIGIN is eligible, a publisher (TAPP) can retrieve the user\u2019s identifier (TPID) via the following interface: GET https://READSERVICE.netid.de/identification/tpid?tapp_id = <TAPP_ID> Accept: application/vnd.netid.identification.tpid-read-v1+json Cookie: tpid_sec = <JWT_TOKEN> Origin: <ORIGIN> 200 OK Content-Type: application/vnd.netid.identification.tpid-read-v1+json Access-Control-Allow-Origin: <ORIGIN> Access-Control-Allow-Credentials: true { \"tpid\" : \"<TPID>|null\" \"status\" : \"OK|NO_TPID|TOKEN_ERROR|CONSENT_REQUIRED\" } JSON Properties Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. status meaning tpid OK Call successful x NO_TPID There was no tpid_sec cookie available. - TOKEN_ERROR Token (JWT) in the cookie has expired or is invalid. - CONSENT_REQUIRED Consent for passing on the TPID missing (\"Identification\"). -","title":"User identifier"},{"location":"cmp/browser-based/#privacy-status","text":"GET https://READSERVICE.netid.de/permissions/iab-permissions? tapp_id = <TAPP_ID> Cookie: tpid_sec = <JWT_TOKEN> Origin: <ORIGIN> 200 OK Access-Control-Allow-Origin: <ORIGIN> Access-Control-Allow-Credentials: true { \"tpid\" : \"<TPID>|null\" , \"tc\" : \"<TC string>|null\" , \"status\" : \"OK|NO_TPID|TOKEN_ERROR|CONSENT_REQUIRED\" } JSON Properties Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. tc The TC string stored for this tpid for this publisher (TCF 2.0). Only with status \"OK\". Otherwise null. status meaning tc pid OK Status successfully retrieved x x NO_TPID There was no tpid_sec cookie available. - - TOKEN_ERROR Token (JWT) in the cookie has expired or is invalid. - - CONSENT_REQUIRED Consent for passing on the TPID missing (\"Identification\"). x -","title":"Privacy status"},{"location":"cmp/browser-based/#write-api","text":"","title":"Write API"},{"location":"cmp/browser-based/#privacy-status_1","text":"POST https://WRITESERVICE.netid.de/permissions/iab-permissions? tapp_id = <TAPP_ID> Cookie: tpid_sec = <JWT_TOKEN> Origin: <ORIGIN> { \"identification\" : \"true|false\" , \"tc\" : \"<TC string>\" } 201 CREATED Location: https://READSERVICE.netid.de/permissions/iab-permissions? tapp_id = <TAPP_ID> Access-Control-Allow-Origin: <ORIGIN> Access-Control-Allow-Credentials: true { \"tpid\" : \"<TPID>|null\" , \"status\" : \"OK|NO_TPID|TOKEN_ERROR\" } Remarks: If permission \"identification\" has been given by the user, this must be signaled by passing \"identification: true\". For the avoidance of doubt, this of course requires the prior collection of this consent by the CMP. If only the TC string is to be updated and the permission \"Identification\" already exists, only the \"tc\" attribute can be passed. Both can also be written at the same time. In case of revocation of permission \"Identification\", would pass only \"identification: false\". JSON Properties request Description identification Boolean flag, indicating the status of the permission \"Identification\". Yes = Consent given No = consent not given / revoked tc The TC String which should be stored for this this user in relation to the netID Partner (TCF 2.0) response Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. status meaning OK TC String / ID CONSENT was saved. NO_TPID There was no tpid_sec cookie available. TOKEN_ERROR Token (JWT) in the cookie has expired or is invalid.","title":"Privacy status"},{"location":"cmp/export/","text":"Data export \u00b6 Via this API partners get the ability to query privacy status (netID permissions and TC strings of users) unrelated to a specific context, via the specification of changed_since deltas can also be queried. There is an HTTP service with a REST API for this service. GET https://DATA-EXPORT-SERVICE/permissions/iab-permissions? tapp_id = <TAPP_ID> & changed_since = <DATE> Authorization: Basic <b64 ( USERNAME:PASSWORD ) > 200 OK { [ { \"tpid\" : \"<tpid>\" , \"type\" : \"IDCONSENT\" , \"status\" : \"VALID\" , \"changed_at\" : \"<timestamp>\" } , { \"tpid\" : \"<tpid>\" , \"tc\" : \"<tc-string>\" , \"changed_at\" : \"<timestamp>\" } ] }","title":"Data export"},{"location":"cmp/export/#data-export","text":"Via this API partners get the ability to query privacy status (netID permissions and TC strings of users) unrelated to a specific context, via the specification of changed_since deltas can also be queried. There is an HTTP service with a REST API for this service. GET https://DATA-EXPORT-SERVICE/permissions/iab-permissions? tapp_id = <TAPP_ID> & changed_since = <DATE> Authorization: Basic <b64 ( USERNAME:PASSWORD ) > 200 OK { [ { \"tpid\" : \"<tpid>\" , \"type\" : \"IDCONSENT\" , \"status\" : \"VALID\" , \"changed_at\" : \"<timestamp>\" } , { \"tpid\" : \"<tpid>\" , \"tc\" : \"<tc-string>\" , \"changed_at\" : \"<timestamp>\" } ] }","title":"Data export"},{"location":"cmp/server-based/","text":"Server-based API (backend integration) \u00b6 Description of the backend integration of the netID Permission Center by the CMP (integration from the server side / backend of the CMP if available). A netID Partner (TAPP) that sends a user through the Single Sign-On Flow and requests manage a privacy status receives the authentication token ( token ) after the successful login, based on which a user can be authenticated at the netID Permission Center to enable read/write access for that specific users privacy status. The server-based requests are secured via the authentication token. Calls of this type are blocked from the browser environments for security reasons (no Origin header is allowed!) Read APIs \u00b6 Accessing a user identifier \u00b6 A CMP can retrieve the user's identifier (TPID) via the following interface: GET https://READSERVICE.netid.de/identification/tpid? token = <TOKEN> 200 OK Content-Type: application/vnd.netid.identification.tpid-read-v1+json { \"tpid\" : \"<TPID>|null\" \"status\" : \"OK|NO_TOKEN|TOKEN_ERROR|CONSENT_REQUIRED\" } JSON Properties Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. status meaning tpid OK A TC string was stored for this TPID. x NO_TOKEN No authentication token was transferred. - TOKEN_ERROR Authentication token (JWT) has expired or is invalid. - CONSENT_REQUIRED Consent for passing on the TPID missing (\"Identification\"). - Privacy status \u00b6 GET https://READSERVICE.netid.de/permissions/iab-permissions? token = <TOKEN> 200 OK Content-Type: application/vnd.netid.permissions.iab-permission-read-v1+json { \"tpid\" : \"<TPID>|null\" , \"tc\" : \"<TC string>|null\" , \"status\" : \"OK|NO_TOKEN|TOKEN_ERROR|CONSENT_REQUIRED\" } JSON Properties Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. tc The TC String which should be stored for this this user in relation to the netID Partner (TCF 2.0) Only with status \"OK\". Otherwise null. status significance tc tpid OK TC String stored for this tpid . x x NO_TPID No authentication token was transferred. - - TOKEN_ERROR Authentication token (JWT) has expired or is invalid. - - CONSENT_REQUIRED Consent for passing on the tpid missing (\"Identification\"). x - Write APIs \u00b6 Privacy status \u00b6 POST https://WRITESERVICE.netid.de/permissions/iab-permissions? token = <TOKEN> { \"identification\" : \"true|false\" , \"tc\" : \"<TC string>\" } 201 CREATED Location: https://READSERVICE.netid.de/permissions/iab-permissions? token = <TOKEN> { \"tpid\" : \"<TPID>|null\" , \"status\" : \"OK|NO_TOKEN|TOKEN_ERROR\" } Remarks: If permission \"identification\" has been given by the user, this must be signaled by passing \"identification: true\". For the avoidance of doubt, this of course requires the prior collection of this consent by the CMP. If only the TC string is to be updated and the permission \"Identification\" already exists, only the \"tc\" attribute can be passed. Both can also be written at the same time. In case of revocation of permission \"Identification\", would pass only \"identification: false\". JSON Properties request Description identification Boolean flag, indicating the status of the permission \"Identification\". Yes = Consent given No = consent not given / revoked tc The TC String which should be stored for this this user in relation to the netID Partner (TCF 2.0) response Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. status significance OK TC String / ID CONSENT was saved. NO_TOKEN No authentication token was transferred. TOKEN_ERROR Authentication token (JWT) has expired or is invalid.","title":"Server-based API (backend integration)"},{"location":"cmp/server-based/#server-based-api-backend-integration","text":"Description of the backend integration of the netID Permission Center by the CMP (integration from the server side / backend of the CMP if available). A netID Partner (TAPP) that sends a user through the Single Sign-On Flow and requests manage a privacy status receives the authentication token ( token ) after the successful login, based on which a user can be authenticated at the netID Permission Center to enable read/write access for that specific users privacy status. The server-based requests are secured via the authentication token. Calls of this type are blocked from the browser environments for security reasons (no Origin header is allowed!)","title":"Server-based API (backend integration)"},{"location":"cmp/server-based/#read-apis","text":"","title":"Read APIs"},{"location":"cmp/server-based/#accessing-a-user-identifier","text":"A CMP can retrieve the user's identifier (TPID) via the following interface: GET https://READSERVICE.netid.de/identification/tpid? token = <TOKEN> 200 OK Content-Type: application/vnd.netid.identification.tpid-read-v1+json { \"tpid\" : \"<TPID>|null\" \"status\" : \"OK|NO_TOKEN|TOKEN_ERROR|CONSENT_REQUIRED\" } JSON Properties Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. status meaning tpid OK A TC string was stored for this TPID. x NO_TOKEN No authentication token was transferred. - TOKEN_ERROR Authentication token (JWT) has expired or is invalid. - CONSENT_REQUIRED Consent for passing on the TPID missing (\"Identification\"). -","title":"Accessing a user identifier"},{"location":"cmp/server-based/#privacy-status","text":"GET https://READSERVICE.netid.de/permissions/iab-permissions? token = <TOKEN> 200 OK Content-Type: application/vnd.netid.permissions.iab-permission-read-v1+json { \"tpid\" : \"<TPID>|null\" , \"tc\" : \"<TC string>|null\" , \"status\" : \"OK|NO_TOKEN|TOKEN_ERROR|CONSENT_REQUIRED\" } JSON Properties Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. tc The TC String which should be stored for this this user in relation to the netID Partner (TCF 2.0) Only with status \"OK\". Otherwise null. status significance tc tpid OK TC String stored for this tpid . x x NO_TPID No authentication token was transferred. - - TOKEN_ERROR Authentication token (JWT) has expired or is invalid. - - CONSENT_REQUIRED Consent for passing on the tpid missing (\"Identification\"). x -","title":"Privacy status"},{"location":"cmp/server-based/#write-apis","text":"","title":"Write APIs"},{"location":"cmp/server-based/#privacy-status_1","text":"POST https://WRITESERVICE.netid.de/permissions/iab-permissions? token = <TOKEN> { \"identification\" : \"true|false\" , \"tc\" : \"<TC string>\" } 201 CREATED Location: https://READSERVICE.netid.de/permissions/iab-permissions? token = <TOKEN> { \"tpid\" : \"<TPID>|null\" , \"status\" : \"OK|NO_TOKEN|TOKEN_ERROR\" } Remarks: If permission \"identification\" has been given by the user, this must be signaled by passing \"identification: true\". For the avoidance of doubt, this of course requires the prior collection of this consent by the CMP. If only the TC string is to be updated and the permission \"Identification\" already exists, only the \"tc\" attribute can be passed. Both can also be written at the same time. In case of revocation of permission \"Identification\", would pass only \"identification: false\". JSON Properties request Description identification Boolean flag, indicating the status of the permission \"Identification\". Yes = Consent given No = consent not given / revoked tc The TC String which should be stored for this this user in relation to the netID Partner (TCF 2.0) response Description tpid Users identifier ( tpid ). Only present if consent \"Identification\" is given, the tpid is present and status \"OK\". Otherwise null. status significance OK TC String / ID CONSENT was saved. NO_TOKEN No authentication token was transferred. TOKEN_ERROR Authentication token (JWT) has expired or is invalid.","title":"Privacy status"},{"location":"devportal/get_started/","text":"Getting Started \u00b6 The netID Developer Portal is the main resource for developers/digital services that want to leverage netID with their online services. It provides all the necessary resources and features to integrate the netID Single Sign-on. In the future, individual reports, information about planned further developments of the netID and much more will be available in the Developer Portal. In order to use these capabilities, you need to register here . The following steps will guide you through the process. Register \u00b6 To create an account for the netID Developer Portal, click on Create developer account . You will be forwarded to the registration page of the netID Developer Portal. Setting up an account is a three step process: Account Details - Specify your e-mail address and a strong password Company Details - Specify company details needed for the netID Single-on (Company operating the services integration the Single Sign-on) Activate Account Account Details \u00b6 Fill out the requested details and continue by clicking Next A strong password does not need to be changed regularly. However, it should consist of at least 8 characters, better 12 or more. The longer your password, the harder it is to crack. Also mix letters, numbers and special characters and switch between upper and lower case. Company Details \u00b6 Creating a new account also requires you to create an associate company profile, which is the legal entity that operates the services that you are integrating the Single Sign-on into. Fill out the necessary details, read the terms of use and accept the user contract. To complete the registration, click on Complete registration . Accepting the user contract requires you to be eligible to act on behalf of your company (as registered in this step). The developer portal supports different roles to address that, namely Developer and Representative . After finishing the signup process the registered user has the role Representative For details on roles/user-management see User Management Activate Account \u00b6 Once the registration has been completed an activation code will be send to the provided e-mail address. If you did not receive an e-mail from us during registration, please contact our support address: support@developer.netid.de To active your account enter the activation code into the form and click Complete activation . Initial Login \u00b6 Once you have registered and activated your account you can sign-in with your chosen credentials. Troubleshooting Login \u00b6 In case you have issues with you login, click Problems logging in? The Developer Portal offers you to: Reset your password, by clicking Password reset Resend an activation code, in case you had problems during the registration process. Click Send activation code In any other case, you can also contact support via e-mail or phone.","title":"Getting started"},{"location":"devportal/get_started/#getting-started","text":"The netID Developer Portal is the main resource for developers/digital services that want to leverage netID with their online services. It provides all the necessary resources and features to integrate the netID Single Sign-on. In the future, individual reports, information about planned further developments of the netID and much more will be available in the Developer Portal. In order to use these capabilities, you need to register here . The following steps will guide you through the process.","title":"Getting Started"},{"location":"devportal/get_started/#register","text":"To create an account for the netID Developer Portal, click on Create developer account . You will be forwarded to the registration page of the netID Developer Portal. Setting up an account is a three step process: Account Details - Specify your e-mail address and a strong password Company Details - Specify company details needed for the netID Single-on (Company operating the services integration the Single Sign-on) Activate Account","title":"Register"},{"location":"devportal/get_started/#account-details","text":"Fill out the requested details and continue by clicking Next A strong password does not need to be changed regularly. However, it should consist of at least 8 characters, better 12 or more. The longer your password, the harder it is to crack. Also mix letters, numbers and special characters and switch between upper and lower case.","title":"Account Details"},{"location":"devportal/get_started/#company-details","text":"Creating a new account also requires you to create an associate company profile, which is the legal entity that operates the services that you are integrating the Single Sign-on into. Fill out the necessary details, read the terms of use and accept the user contract. To complete the registration, click on Complete registration . Accepting the user contract requires you to be eligible to act on behalf of your company (as registered in this step). The developer portal supports different roles to address that, namely Developer and Representative . After finishing the signup process the registered user has the role Representative For details on roles/user-management see User Management","title":"Company Details"},{"location":"devportal/get_started/#activate-account","text":"Once the registration has been completed an activation code will be send to the provided e-mail address. If you did not receive an e-mail from us during registration, please contact our support address: support@developer.netid.de To active your account enter the activation code into the form and click Complete activation .","title":"Activate Account"},{"location":"devportal/get_started/#initial-login","text":"Once you have registered and activated your account you can sign-in with your chosen credentials.","title":"Initial Login"},{"location":"devportal/get_started/#troubleshooting-login","text":"In case you have issues with you login, click Problems logging in? The Developer Portal offers you to: Reset your password, by clicking Password reset Resend an activation code, in case you had problems during the registration process. Click Send activation code In any other case, you can also contact support via e-mail or phone.","title":"Troubleshooting Login"},{"location":"devportal/reporting/","text":"Reports \u00b6 Overview \u00b6 The netID Developer Portal provides KPIs in individual reports as .cvs files for you to download. Here you can find an overview of the reports provided by the netID Developer Portal. General Information \u00b6 Reporting interval : daily Aggregates : Rolling time windows, aggregated to 1 day, 7 days, 30 days Reporting period : A report contains a maximum of 366 days Reports are calculated for the partner and each of his existing Relying Party. Each Relying Party will have its figures and the figures of its partner displayed as a sum. Reports in the netID Developer Portal \u00b6 Report Description Authentication Dialog This report shows how many netID users wanted to register with netID and successfully entered their e-mail address for identification on the login page. Authentication Process The report provides information on how many netID users have completed the authentication process by entering a password. The report shows both successful and unsuccessful authentications. Authentication Process Core Data The report provides information about which master data was transferred in the authorization process. For each master data, it shows how often \"required and optional\" (as a total) or only optional master data was transferred in the authorization process. Note: This report only contains daily aggregates . Authorization Dialog The report provides information on the frequency of the master data dialog. The dialogue is played out if - the netID user logs on to the Relying Party for the first time - the Relying Party requires new / different netID User master data - the Relying Party wants to play the master data dialog again. Note: Unique users are also shown. Authorization Process The report evaluates how often required and optional (as a total) or only optional master data was transferred after the dialog was confirmed. Note: Unique users are also shown. Broker Dialog The report evaluates how often the netID login flow was started, triggered by a click on the netID login button on the Relying Party page Broker \"new netID User\" Dialog The report evaluates the number of entered e-mail addresses that are not yet netID-enabled. These addresses were entered in the Broker dialog by the netID user. Broker Process The report evaluates the number of events that should continue the netID login flow by entering an email address. It distinguishes between successful and unsuccessful attempts. Successful if the entered e-mail address is known in the netID login context and unsuccessful if the e-mail address is incorrect or could not be assigned.** Note:** Only events that were played out via the Broker dialog are counted. Broker master data transfer The report provides information about the number of master data transferred, which were forwarded by the OpenID provider. It displays required and optional master data as a total and optional master data separately. Registration Neutral Instance Dialog The report provides information on how often a registration attempt was initiated for the netID partner. Registration Neutral Instance Process The report provides information on the number of successful and unsuccessful registrations. SSO active user The report provides information about the number of active users for the period under consideration, separated by partner and its relying party. A user activity is defined by a successful login. SSO user The report provides information on the development of the SSO user inventory. SSO user first use The report evaluates the number of first use of netID separately by partner (total) and its reeling party. Download Reports \u00b6 The netID Developer Portal provides individual reports as .cvs files for download. To download a report, click on Reports in the navigation on the left. An overview of all available reports is displayed. Click on download to the right of the report you wish to download. A notification appears asking you whether you want to open or save the report. Select whether you want to open or save the report by clicking on Open or Save/Save As. The desired report is downloaded.","title":"KPI Reports"},{"location":"devportal/reporting/#reports","text":"","title":"Reports"},{"location":"devportal/reporting/#overview","text":"The netID Developer Portal provides KPIs in individual reports as .cvs files for you to download. Here you can find an overview of the reports provided by the netID Developer Portal.","title":"Overview"},{"location":"devportal/reporting/#general-information","text":"Reporting interval : daily Aggregates : Rolling time windows, aggregated to 1 day, 7 days, 30 days Reporting period : A report contains a maximum of 366 days Reports are calculated for the partner and each of his existing Relying Party. Each Relying Party will have its figures and the figures of its partner displayed as a sum.","title":"General Information"},{"location":"devportal/reporting/#reports-in-the-netid-developer-portal","text":"Report Description Authentication Dialog This report shows how many netID users wanted to register with netID and successfully entered their e-mail address for identification on the login page. Authentication Process The report provides information on how many netID users have completed the authentication process by entering a password. The report shows both successful and unsuccessful authentications. Authentication Process Core Data The report provides information about which master data was transferred in the authorization process. For each master data, it shows how often \"required and optional\" (as a total) or only optional master data was transferred in the authorization process. Note: This report only contains daily aggregates . Authorization Dialog The report provides information on the frequency of the master data dialog. The dialogue is played out if - the netID user logs on to the Relying Party for the first time - the Relying Party requires new / different netID User master data - the Relying Party wants to play the master data dialog again. Note: Unique users are also shown. Authorization Process The report evaluates how often required and optional (as a total) or only optional master data was transferred after the dialog was confirmed. Note: Unique users are also shown. Broker Dialog The report evaluates how often the netID login flow was started, triggered by a click on the netID login button on the Relying Party page Broker \"new netID User\" Dialog The report evaluates the number of entered e-mail addresses that are not yet netID-enabled. These addresses were entered in the Broker dialog by the netID user. Broker Process The report evaluates the number of events that should continue the netID login flow by entering an email address. It distinguishes between successful and unsuccessful attempts. Successful if the entered e-mail address is known in the netID login context and unsuccessful if the e-mail address is incorrect or could not be assigned.** Note:** Only events that were played out via the Broker dialog are counted. Broker master data transfer The report provides information about the number of master data transferred, which were forwarded by the OpenID provider. It displays required and optional master data as a total and optional master data separately. Registration Neutral Instance Dialog The report provides information on how often a registration attempt was initiated for the netID partner. Registration Neutral Instance Process The report provides information on the number of successful and unsuccessful registrations. SSO active user The report provides information about the number of active users for the period under consideration, separated by partner and its relying party. A user activity is defined by a successful login. SSO user The report provides information on the development of the SSO user inventory. SSO user first use The report evaluates the number of first use of netID separately by partner (total) and its reeling party.","title":"Reports in the netID Developer Portal"},{"location":"devportal/reporting/#download-reports","text":"The netID Developer Portal provides individual reports as .cvs files for download. To download a report, click on Reports in the navigation on the left. An overview of all available reports is displayed. Click on download to the right of the report you wish to download. A notification appears asking you whether you want to open or save the report. Select whether you want to open or save the report by clicking on Open or Save/Save As. The desired report is downloaded.","title":"Download Reports"},{"location":"devportal/tutorial/clients/","text":"Clients \u00b6 Using clients you can manage the technical details for an integration into your services. Services may have multiple clients to cater for different types of integration (mobile, website, ...). Lifecycle \u00b6 Clients have a simple lifecycle, once they are created they immediately get into the active state and can be used. At any point in time you can choose to Delete a specific client, which puts it into the state deleted . Clients remain in the state deleted for 14 days, once these are passed it will be permanently removed. Within the 14 days grace period clients can be re-activated and return to into the active state. De-active a specific client which puts into inactive status (disabling its usage). It can be re-activated and returns to into the active state. Status changes on the overall service this client belongs to will also have immediate effect on all of its clients. Detailed Functionality \u00b6 Creating a Client \u00b6 To create a client for a service, select Add client in the details view of the service. Client Details can be defined in the provided form. Fill out the necessary details, most importantly in case this client is meant for production use make sure that the Callback URL points to the same backend that operates this specific service. While this is not technically enforced, the callback URL must be operated by your company. Please note that netID uses pairwise subject identifiers , which are derived respective to the clients callback url (more specifically the hostname portion) set here. If you're using multiple clients for a service, you may want to use callback urls with identical host portion. Once the client is created you can retrieve the necessary credentials to integrate into your environment by expanding the client details, namely Client ID and Client Secret . A client has two sets of credentials ( Client ID is the same): Client secret - sandbox : which is to be used in case the service is still in sandboxed mode Client secret - live : which becomes available for use in a production environment once the service has been approved for production use. For details see Approval for production use Edit a Client \u00b6 To edit a client select Edit in the Clients listing of the details view of the respective service for this client. Client details can be edited in the provided form. Make the desired changes and updates and save the information by confirmation using Update Client . Deactivate a Client \u00b6 To temporarily deactivate a client select Edit in the Clients listing of the details view of the respective service for this client. In the client details form select the Inactive in the drop down menu under Status . Reactivate a Client \u00b6 To reactivate a client select Edit in the Clients listing in the details view of the respective service for this client. In the client details form select the Active in the drop down menu under Status . Delete a Client \u00b6 To delete a client permanently expand the client details in the Clients listing of the details view of the respective service for this client. Click on Delete client at the bottom of the expanded details and confirm the deletion. See notes on lifecycle","title":"Clients"},{"location":"devportal/tutorial/clients/#clients","text":"Using clients you can manage the technical details for an integration into your services. Services may have multiple clients to cater for different types of integration (mobile, website, ...).","title":"Clients"},{"location":"devportal/tutorial/clients/#lifecycle","text":"Clients have a simple lifecycle, once they are created they immediately get into the active state and can be used. At any point in time you can choose to Delete a specific client, which puts it into the state deleted . Clients remain in the state deleted for 14 days, once these are passed it will be permanently removed. Within the 14 days grace period clients can be re-activated and return to into the active state. De-active a specific client which puts into inactive status (disabling its usage). It can be re-activated and returns to into the active state. Status changes on the overall service this client belongs to will also have immediate effect on all of its clients.","title":"Lifecycle"},{"location":"devportal/tutorial/clients/#detailed-functionality","text":"","title":"Detailed Functionality"},{"location":"devportal/tutorial/clients/#creating-a-client","text":"To create a client for a service, select Add client in the details view of the service. Client Details can be defined in the provided form. Fill out the necessary details, most importantly in case this client is meant for production use make sure that the Callback URL points to the same backend that operates this specific service. While this is not technically enforced, the callback URL must be operated by your company. Please note that netID uses pairwise subject identifiers , which are derived respective to the clients callback url (more specifically the hostname portion) set here. If you're using multiple clients for a service, you may want to use callback urls with identical host portion. Once the client is created you can retrieve the necessary credentials to integrate into your environment by expanding the client details, namely Client ID and Client Secret . A client has two sets of credentials ( Client ID is the same): Client secret - sandbox : which is to be used in case the service is still in sandboxed mode Client secret - live : which becomes available for use in a production environment once the service has been approved for production use. For details see Approval for production use","title":"Creating a Client"},{"location":"devportal/tutorial/clients/#edit-a-client","text":"To edit a client select Edit in the Clients listing of the details view of the respective service for this client. Client details can be edited in the provided form. Make the desired changes and updates and save the information by confirmation using Update Client .","title":"Edit a Client"},{"location":"devportal/tutorial/clients/#deactivate-a-client","text":"To temporarily deactivate a client select Edit in the Clients listing of the details view of the respective service for this client. In the client details form select the Inactive in the drop down menu under Status .","title":"Deactivate a Client"},{"location":"devportal/tutorial/clients/#reactivate-a-client","text":"To reactivate a client select Edit in the Clients listing in the details view of the respective service for this client. In the client details form select the Active in the drop down menu under Status .","title":"Reactivate a Client"},{"location":"devportal/tutorial/clients/#delete-a-client","text":"To delete a client permanently expand the client details in the Clients listing of the details view of the respective service for this client. Click on Delete client at the bottom of the expanded details and confirm the deletion. See notes on lifecycle","title":"Delete a Client"},{"location":"devportal/tutorial/services/","text":"Services \u00b6 Services allow you to manage all the necessary technical and non-technical details to integrate the netID Sign Sign-on into one of your offerings. Registered companies can have multiple services , each service can have multiple clients . At service level you manage mainly non-technical details (branding, data privacy and usage terms), whereas technical details are managed at the individual client level. Lifecycle \u00b6 Services have a simple lifecycle, once they are created they immediately get into the active state and can be used. At any point in time you can choose to delete a specific service, which puts the service and all of its clients into the state deleted . Services remain in the state deleted for 14 days, once these are passed it will be permanently removed. Within the 14 days grace period services can be re-activated and return to into the active state. Sandboxed Mode \u00b6 Besides the general status as described above, services run by default (meaning after they are created) in a sandboxed mode which means they are not yet used/approved for production use. In sandboxed mode, a service and its respective clients are fully functional, but can only be used with explicitly whitelisted test users Detailed Functionality \u00b6 Create a Service \u00b6 Select Services in the menu, click Add service and fill in the required details in the following screen. Service domain is the domain of your customer facing website. Also, links to data privacy information ( URL privacy policy ) and terms of usage ( URL terms of usage ) should be supplied. As a best practice use separate services for development and production environments. Note: for testing purposes, you can actually enter any domain and URL values into this form, as they are not technically relevant in order to get a initial testing integration running. The details provided here will be used within the netID User Interfaces (Single Sign-on, Privacy Center). If you are deploying into a production environment make sure that to provide accurate information. These values will also be inspected before a service is allowed to be used without sandboxed mode. To save your service, click on Add service . The next step to start the integration of netID for that service is to create a client for it. For details see client tutorial Service Details View \u00b6 To manage the details of services and their respective clients you need to navigate to the services details view by selecting Services in the navigation on the left, which will show you the list of all services, and by clicking on Details on the right hand of the service name. Manage Test Users \u00b6 To manage users that can be used with sandboxed services (see Sandboxed Mode ), you can managed the whitelist of users for a specific service in the details view under Test user Simply add users with Add test user or remove them with Delete Approval for production use \u00b6 Once you've run thought the technical integration, you can request your service to be approved for usage in a production environment (without limitation to test users). To start the process open the details view of the service you want to activate and click on Request service release . The service will be reviewed by the EnID and approved for production usage (not limited to test users) Edit a Service \u00b6 To alter an already existing service navigate to the service details view and click Edit next to the name of the service. In order to change details of a service you will be prompted to re-enter you password. Make the desired changes and updates and save the changes with a click on Update Service . Delete a Service \u00b6 To delete an already existing service, navigate to the service details view details view Select Show more details . Click Delete Service . To permanently delete the service, confirm the process by re-entering your password. The service will remain listed for the next 14 days with a status DELETED . Within that timeframe you can recover a deleted service before it is permanently deleted and removed from your service overview. Reactivate a service Reactivate a Service \u00b6 To re-active an already deleted service, navigate to the service details view details view for that service. Click Show more details . Click Reactivate Service . To confirm the reactivation, confirm the process by re-entering your password. Once done the service will appear with an Active status.","title":"Services"},{"location":"devportal/tutorial/services/#services","text":"Services allow you to manage all the necessary technical and non-technical details to integrate the netID Sign Sign-on into one of your offerings. Registered companies can have multiple services , each service can have multiple clients . At service level you manage mainly non-technical details (branding, data privacy and usage terms), whereas technical details are managed at the individual client level.","title":"Services"},{"location":"devportal/tutorial/services/#lifecycle","text":"Services have a simple lifecycle, once they are created they immediately get into the active state and can be used. At any point in time you can choose to delete a specific service, which puts the service and all of its clients into the state deleted . Services remain in the state deleted for 14 days, once these are passed it will be permanently removed. Within the 14 days grace period services can be re-activated and return to into the active state.","title":"Lifecycle"},{"location":"devportal/tutorial/services/#sandboxed-mode","text":"Besides the general status as described above, services run by default (meaning after they are created) in a sandboxed mode which means they are not yet used/approved for production use. In sandboxed mode, a service and its respective clients are fully functional, but can only be used with explicitly whitelisted test users","title":"Sandboxed Mode"},{"location":"devportal/tutorial/services/#detailed-functionality","text":"","title":"Detailed Functionality"},{"location":"devportal/tutorial/services/#create-a-service","text":"Select Services in the menu, click Add service and fill in the required details in the following screen. Service domain is the domain of your customer facing website. Also, links to data privacy information ( URL privacy policy ) and terms of usage ( URL terms of usage ) should be supplied. As a best practice use separate services for development and production environments. Note: for testing purposes, you can actually enter any domain and URL values into this form, as they are not technically relevant in order to get a initial testing integration running. The details provided here will be used within the netID User Interfaces (Single Sign-on, Privacy Center). If you are deploying into a production environment make sure that to provide accurate information. These values will also be inspected before a service is allowed to be used without sandboxed mode. To save your service, click on Add service . The next step to start the integration of netID for that service is to create a client for it. For details see client tutorial","title":"Create a Service"},{"location":"devportal/tutorial/services/#service-details-view","text":"To manage the details of services and their respective clients you need to navigate to the services details view by selecting Services in the navigation on the left, which will show you the list of all services, and by clicking on Details on the right hand of the service name.","title":"Service Details View"},{"location":"devportal/tutorial/services/#manage-test-users","text":"To manage users that can be used with sandboxed services (see Sandboxed Mode ), you can managed the whitelist of users for a specific service in the details view under Test user Simply add users with Add test user or remove them with Delete","title":"Manage Test Users"},{"location":"devportal/tutorial/services/#approval-for-production-use","text":"Once you've run thought the technical integration, you can request your service to be approved for usage in a production environment (without limitation to test users). To start the process open the details view of the service you want to activate and click on Request service release . The service will be reviewed by the EnID and approved for production usage (not limited to test users)","title":"Approval for production use"},{"location":"devportal/tutorial/services/#edit-a-service","text":"To alter an already existing service navigate to the service details view and click Edit next to the name of the service. In order to change details of a service you will be prompted to re-enter you password. Make the desired changes and updates and save the changes with a click on Update Service .","title":"Edit a Service"},{"location":"devportal/tutorial/services/#delete-a-service","text":"To delete an already existing service, navigate to the service details view details view Select Show more details . Click Delete Service . To permanently delete the service, confirm the process by re-entering your password. The service will remain listed for the next 14 days with a status DELETED . Within that timeframe you can recover a deleted service before it is permanently deleted and removed from your service overview. Reactivate a service","title":"Delete a Service"},{"location":"devportal/tutorial/services/#reactivate-a-service","text":"To re-active an already deleted service, navigate to the service details view details view for that service. Click Show more details . Click Reactivate Service . To confirm the reactivation, confirm the process by re-entering your password. Once done the service will appear with an Active status.","title":"Reactivate a Service"},{"location":"devportal/tutorial/users/","text":"User Management \u00b6 The netID Developer Portal supports different roles with different levels of access, namely Developer and Representative. Creating a new developer portal account from scratch (and thus a new managed company profile) will assign you the role Representative. Roles can be changed and users can be invited to participate in the management of a company profile. For details on roles see roles/rights . Detailed Functionality \u00b6 In order to access the user management functionality, navigate to User Management view by clicking on it in the left hand menu. This view lists all the active users and exposes the below described functionality. Change personal data \u00b6 Click on Details for the respective user in the User Management View. Make the desired changes and then confirm your entries by clicking on Apply changes . Invite a new user \u00b6 To add relevant team members to your company profile, users with the role representative can invite new users. Click on Invite User in the User Management view. Add the necessary details for the new user (name, email address, ...) and the role he will be assigned to once added. Choose the role carefully, see roles/rights for details. To start the invitation process click on Send invitation , the invited user will receive an email with the necessary details. Changing the role of a user \u00b6 Representatives can change the role of users at any point in time, by clicking Details for the respective user in the User Management View. Simply select a new role in the details dialog and confirm with Accept changes . Choose the role carefully: Representatives have full administrative access, Developers can only manage the necessary technical details for clients, see roles/rights for details. At least one user must have the role Representative. Conflicting changes will be rejected. Delete user \u00b6 Representatives can remove users at any point in time, by clicking Details for the respective user in the User Management View and clicking Delete user account . At least one user must have the role Representative. Conflicting changes will be rejected. Company Profile Main Contact \u00b6 To manage/adjust you general main company contact select Company Profile in the navigation on the left. Adjust the details under Contact details and click on Apply Changes . Roles/Rights \u00b6 The following table show the rights per role: Function Representative Developer View Service X X Create Service X Edit Service X Delete Service X View Client X X Create Client X Edit Client X X Delete Client X Manage Test Users X X View Users X Himself only Invite Users X Edit Users Own details + all roles own details Delete Users X View Company Profile X X Edit Company Profile X","title":"User Management"},{"location":"devportal/tutorial/users/#user-management","text":"The netID Developer Portal supports different roles with different levels of access, namely Developer and Representative. Creating a new developer portal account from scratch (and thus a new managed company profile) will assign you the role Representative. Roles can be changed and users can be invited to participate in the management of a company profile. For details on roles see roles/rights .","title":"User Management"},{"location":"devportal/tutorial/users/#detailed-functionality","text":"In order to access the user management functionality, navigate to User Management view by clicking on it in the left hand menu. This view lists all the active users and exposes the below described functionality.","title":"Detailed Functionality"},{"location":"devportal/tutorial/users/#change-personal-data","text":"Click on Details for the respective user in the User Management View. Make the desired changes and then confirm your entries by clicking on Apply changes .","title":"Change personal data"},{"location":"devportal/tutorial/users/#invite-a-new-user","text":"To add relevant team members to your company profile, users with the role representative can invite new users. Click on Invite User in the User Management view. Add the necessary details for the new user (name, email address, ...) and the role he will be assigned to once added. Choose the role carefully, see roles/rights for details. To start the invitation process click on Send invitation , the invited user will receive an email with the necessary details.","title":"Invite a new user"},{"location":"devportal/tutorial/users/#changing-the-role-of-a-user","text":"Representatives can change the role of users at any point in time, by clicking Details for the respective user in the User Management View. Simply select a new role in the details dialog and confirm with Accept changes . Choose the role carefully: Representatives have full administrative access, Developers can only manage the necessary technical details for clients, see roles/rights for details. At least one user must have the role Representative. Conflicting changes will be rejected.","title":"Changing the role of a user"},{"location":"devportal/tutorial/users/#delete-user","text":"Representatives can remove users at any point in time, by clicking Details for the respective user in the User Management View and clicking Delete user account . At least one user must have the role Representative. Conflicting changes will be rejected.","title":"Delete user"},{"location":"devportal/tutorial/users/#company-profile-main-contact","text":"To manage/adjust you general main company contact select Company Profile in the navigation on the left. Adjust the details under Contact details and click on Apply Changes .","title":"Company Profile Main Contact"},{"location":"devportal/tutorial/users/#rolesrights","text":"The following table show the rights per role: Function Representative Developer View Service X X Create Service X Edit Service X Delete Service X View Client X X Create Client X Edit Client X X Delete Client X Manage Test Users X X View Users X Himself only Invite Users X Edit Users Own details + all roles own details Delete Users X View Company Profile X X Edit Company Profile X","title":"Roles/Rights"},{"location":"sso/doc_sso_developer/","text":"Single Sign-on Documentation \u00b6 This documentation describes the federated Single Sign-on \"netID\", which allows digital services (netID Partners) to register and login netID Users based on their account at so called netID Account Providers. In order to acquire the necessary credentials to leverage this service please refer to the Developer Portal Documentation Integration Guide \u00b6 General Overview \u00b6 The netID Single Sign-on implements the OpenID Connect standard as per the OpenID Connect Core 1.0 specification using the Authorization Code Flow. Partners manage their details as well as service/clients settings in the netID Developer Portal. They can register/manage services and associated clients for these services (Website, App, Mobile, ...). Data transfer authorizations are managed service/client specific. All the clients' communication takes place via EnID's central SSO broker. The SSO broker routes requests to the participating Account Providers, end users always authenticate to the Account Provider that manages their specific account, which is also where they authorize data transfer to a partners' service. Clients specify during authentication calls which master data they request to be authorized by a user for transfer; if the user agrees, the client receives an id_token and a userinfo object as a JSON structure. id_token and userinfo objects also contain the end user's subject identifier ( sub ). netID uses Pairwise Subject Identifiers to derive client specific subject identifiers during authentication requests. The subject identifier is derived using the host portion of the redirect_uri (Callback URL) and used to store data transfer authorization grants in the backend. That means clients of a specific service must use the same callback urls (in terms of host portion) during their authentication calls to avoid duplicated data transfer authorization / different subject identifiers between clients. Claims und Scopes \u00b6 Each time a partner initiates a login flow by calling the authorization endpoint he can define which master data the user should authorize to be transferred. For that purpose, the OpenID Connect/OAuth2 standard defines scope and claim mechanisms. Every OpenID Connect request must always request the openid scope. Moreover, the master data required/asked for by the partner can be expressed in the form of essential claims with netID. Once the user authorizes the transfer of that master data, this authorization is stored and not being asked for again unless the users revokes the authorization using the netID Privacy Center. The following claims are supported by netID: gender - the end user's gender given_name - the end user's first name (or names) family_name - the end user's last name birthdate - the end user's date of birth email - the end user's email address email_verified - the verification status of the end user's email address address - physical mailing address, containing informations on postal code (ZIP), city or town, street address and country where the end user's address is located The availability of these claims may, however, vary depending on the end user's account provider; in such cases un-supported claims are ignored and the client needs to handle this accordingly. Important: please note! Claims that are not requested as essential are ignored. The same applies to OIDC scope based claims requests, which are by definition also voluntary. Example Endpoint Calls \u00b6 Authorize \u00b6 Requests to the authorize endpoint initiate the Single Sign-on process, clients identify themselves with their client_id and redirect_uri and specify which claims and scopes are to be requested. Some optional parameters are also supported . The netID Broker endpoint for authorize requests is https://broker.netid.de/authorize . All endpoints and supported OpenID Connect features are also available here: https://broker.netid.de/.well-known/openid-configuration Sample Calls are provided given both easy readable as well as in valid URL encoding. The encoding needs to be used for the redirect_uri as well: Minimum Query \u00b6 SSO without requesting any additional data https://broker.netid.de/authorize? response_type = code & client_id =[ clientID ] & redirect_uri =[ redirect_uri ] & scope = openid URL encoding https://broker.netid.de/authorize?response_type = code & amp ; client_id =[ clientID ] & amp ; redirect_uri =[ redirect_uri ] & amp ; scope = openid Query for \u201cprofile\u201d information \u00b6 Profile scope expressed in essential claims https://broker.netid.de/authorize? response_type = code & client_id =[ clientID ] & redirect_uri =[ redirect_uri ] & scope = openid & claims ={ \"userinfo\" : { \"birthdate\" : { \"essential\" :true } , \"gender\" : { \"essential\" :true } , \"given_name\" : { \"essential\" :true } , \"family_name\" : { \"essential\" :true } } } URL encoding https://broker.netid.de/authorize?response_type = code & client_id =[ clientID ] & redirect_uri =[ redirect_uri ] & scope = openid & claims ={ \"userinfo\" : { \"birthdate\" : { \"essential\" :true } , \"gender\" : { \"essential\" :true } , \"given_name\" : { \"essential\" :true } , \"family_name\" : { \"essential\" :true }}} Token \u00b6 Token requests are carried out after the callback to the client in order to exchange the code provided for an access token for the userinfo endpoint. It is absolutely necessary that the code used remains unmodified. The netID Broker endpoint for token requests is https://broker.netid.de/token . Credentials need to be provided via basic authentication https://broker.netid.de/token? code =[ code ] & redirect_uri =[ redirect_uri ] & grant_type = authorization_code Example request per curl: curl -v -u [ user:pass ] -X POST https://broker.netid.de/token -H 'content-type: application/x-www-form-urlencoded; charset=UTF-8' -d 'code=[code]&redirect_uri=[redirect_uri]&grant_type=authorization_code' Userinfo \u00b6 The access token is used to retrieve userinfo and id_token from the userinfo endpoint. The netID Broker endpoint for userinfo requests is https://broker.netid.de/userinfo . Timing and Error Messages \u00b6 If the authorize request fails, the respective error is provided with the callback to the redirect_uri. With token requests, it's particularly important to ensure that the code provided is identical bit-by-bit to the one received in the callback to the redirect_uri, and that the credentials provided via basic authentication are correct. Lifetimes \u00b6 Authorization codes are only valid for 30 seconds and may only be used once Access token are valid for 15 minutes for use with the userinfo endpoint and may be used multiple times Implementation Details \u00b6 The following request parameters are supported for initiating the SSO process: prompt login for requiring re-authentication of a user during the login process consent for requiring consent to be given again max_age in cases where time of authentication may not be too far in the past login_hint to provide and email address in order to prevent the broker's user interface from being visible to the user and thus directly redirect to the relevant account provider state The value of this parameter is passed through the entire flow transparently and included when calling back to the redirect_uri . It may be used to recognize how authorize request and asynchronous response are associated in the client. The sequence of the calls is summarized as follows: Detailed description of the sequence diagram The end user initiates a process on the client's site that involves the use of netID. At this point, the client generates a netID button for an authorize request and redirects the end user to the SSO broker. The SSO broker validates the client's authorize request. The SSO broker generates a new authorize request and redirects the user to the OpenID provider. For their part, the broker appears to the OpenID provider as a relying party client. The OpenID provider validates the SSO broker's authorize request and displays the login screen to the end user; the user logs in with the account provider. The OpenID provider shows an approval page to the end user on which all the data he or she is asked to allow transfer of is displayed. The end user agrees to provide the requested data. The OpenID provider generates an AuthN Response and redirects to the SSO broker. The SSO broker receives the AuthN Response from the OpenID provider. The SSO broker generates a new AuthN Response and redirects to the client's redirect_uri . The client receives the SSO broker's AuthN Response. The actual data query is initiated. The client requests the access token with the SSO broker using the Auth Code (from the AuthN Response) and the Client Credentials. The SSO broker requests the access token from the OP using the Auth Code (from the AuthN Response) and the Client Credentials taken from the client. The OpenID provider issues an access token, giving it to the SSO broker. The SSO broker uses the access token to generate a new access token, giving this one to the client. The client uses the access token with the SSO broker to request the userinfo object. The SSO broker uses the access token to request the userinfo object from the OpenID provider. The OpenID provider grants the userinfo object to the SSO broker. The SSO broker grants the userinfo object to the client. The client has now received the userinfo object. netID Button \u00b6 The depiction of the netID button is explained in the styleguide . Best Practices \u00b6 It is largely up to the relying parties to decide where netID is to be incorporated in clients. Typical cases involve the use of netID as a login or data enrichment mechanism. As a login mechanism, for example, netID may be used like other SSO mechanisms (as well as alongside them) as an authentication alternative, or even used as the sole login method. Whether or not a local account is to be held in addition to the netID account is entirely up to the relying party. netID does not provide a classic session, but the SSO process is available via the authorize process at all times. An email address provided to the broker via a browser will be stored as a 1 st -party cookie; the end user may decide whether to remain logged in with the account provider. The end user's approval for the transfer of master data will be sought only upon the first request for such data, unless the user revokes his or her approval; ideally, this allows SSO flows to be able to run even with interaction from the user. If a relying party would like to also be able to handle authentication of end users independently of netID, it is advisable to ensure that mechanisms for merging or separating accounts are provided for. If local account representations with local credentials exist alongside netID, there should also be support processes for handling them; netID support processes only come into effect in connection with netID accounts themselves. In terms of data enrichment, examples may include using netID during registration processes to make it easier for users to enter information, or as a source for addresses when customers are checking out with their shopping carts online. Whether the data provided is to be used only temporarily or whether it should persist is again left up to the relying parties to freely decide. Each time netID is triggered, the data obtained is up to date in relation to the information currently available to the account provider. With regard to local copies, it may be reasonable to repeatedly request updates and synchronize them. The relying party is to take the principles of data protection into account as they pertain to local data retention. Ideally, data enrichment processes should be initiated in those places where the data is actually needed. This helps to optimize conversion rates while achieving a high degree of data minimization. One thing to be aware of is the verification status of email addresses: if an email address has already been verified with netID, a new request from the relying party to verify the email address is, generally speaking, unnecessary and may cause confusion on the part of the end user. Those netID accounts associated with account providers that are, for their part, email providers, are verified from the outset. If such an email account is deleted, not only does the end user lose the ability to use netID, but all support processes based on that email address will come to nothing. Security Information \u00b6 All communication with netID must be secured by TLS. This also applies to all URLs entered in the developer portal. netID exclusively supports the Authorization Code Flow, so that id_token is only transferred in TLS-secured back-end to back-end communication. Currently, the only token signature supported is none. Use of SDKs \u00b6 There are a large number of OpenID Connect client libraries available in many different language environments. Below, several examples will be given, along with tips for using them. Many client libraries are listed at https://openid.net/developers/libraries/ , and others are easy to find. General \u00b6 Regardless of the choice of environment, it's possible to do the following preliminary experiments: In the developer portal for the partner, create a service, request approval for it, and then create a client for it When choosing which URLs to use, it's possible to generate locally applicable test environments by making an entry in the hosts file of a developer workstation at the endpoints given for service and client and creating and using self-signed certificates. Example \"Entry in hosts\" 127.0.0.1 www.democlient.de Example \"Creating a self-signed certificate\" openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout key.pem -out cert.pem Here, for the Common Name give the host name of the environment you want; so, in this case: www.democlient.de . Using the Client Credentials from the developer portal, the local host entry, and the certificate with the key, it's possible to run through the netID requests. When testing with browsers, it's a good idea to use private windows; otherwise cookies left behind from previous run-throughs may cause confusion. to top Examples \u00b6 PHP In PHP it's possible to use the package https://github.com/jumbojett/OpenID-Connect-PHP . However, some adjustments are necessary, since netID always uses none for the token signature algorithm in the Authorization Code Flow. Installation according to instructions is no problem. The package derives the redirect_uri from its own URL; here, the position of the script in the path of the web server can either be used as redirect_uri when creating the client or configured accordingly in the web server using rewrite rules. The following minimal diff makes OpenIDConnectClient.php netID-compatible: 844a845,848 > $signature = base64url_decode(array_pop($parts)); > if (false === $signature || '' === $signature) { > throw new OpenIDConnectClientException('Error decoding signature from token'); > } 874,877d877 < // netID has 'none' < case 'none' : < $verified=true; < break; A simple sample client may then look like this: <?php /** * * Copyright MITRE 2012 * * OpenIDConnectClient for PHP5 * Author: Michael Jett <mjett@mitre.org> * * Licensed under the Apache License, Version 2.0 (the \"License\"); you may * not use this file except in compliance with the License. You may obtain * a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the * License for the specific language governing permissions and limitations * under the License. * */ require __DIR__ . '/vendor/autoload.php' ; use Jumbojett\\OpenIDConnectClient ; // specify ClientID und secret! $oidc = new OpenIDConnectClient ( 'https://broker.netid.de/' , 'example-clientid' , 'example-secret' ); // if the default redirect_uri is not to be used, a custom value can be set here: // $oidc->setRedirectURL('https://clientexample.org/callback'); // then however a URL-rewrite is necessary, as for example with mod_rewrite from apache: // RewriteEngine On // RewriteRule \"^callback(.*)\" \"/client_example.php$1\" $oidc -> authenticate (); $sub = $oidc -> getVerifiedClaims ( 'sub' ); ?> <html> <head> <title>Example OpenID Connect Client Use</title> <style> body { font-family: 'Lucida Grande', Verdana, Arial, sans-serif; } </style> </head> <body> <div> netID login successful, the Subject Identifier is: <?php echo $sub ; ?> </div> </body> </html> Javascript One highly recommended JavaScript implementation (node.js) of an OpenID Connect relying party can be found here: https://www.npmjs.com/package/openid-client Java Spring Security examples for Java: GitHub:mitreid-connect/simple-web-app GitHub:eugenp/tutorials/tree/master/spring-security-openid Rust A good OpenID Connect relying party client for Rust can be found here: https://docs.rs/crate/oidc/0.2.0 . Go For go the package GitHub:coreos/go-oidc makes a netID login possible. The package may be installed here: go get github . com / coreos / go - oidc There is no explicit support for entering claims, essential or otherwise. The simple example client netid.go first needs to be edited before Client Credentials, host name, and certificates may be entered, after which it can be run using: go run netid . go","title":"Technical Details"},{"location":"sso/doc_sso_developer/#single-sign-on-documentation","text":"This documentation describes the federated Single Sign-on \"netID\", which allows digital services (netID Partners) to register and login netID Users based on their account at so called netID Account Providers. In order to acquire the necessary credentials to leverage this service please refer to the Developer Portal Documentation","title":"Single Sign-on Documentation"},{"location":"sso/doc_sso_developer/#integration-guide","text":"","title":"Integration Guide"},{"location":"sso/doc_sso_developer/#general-overview","text":"The netID Single Sign-on implements the OpenID Connect standard as per the OpenID Connect Core 1.0 specification using the Authorization Code Flow. Partners manage their details as well as service/clients settings in the netID Developer Portal. They can register/manage services and associated clients for these services (Website, App, Mobile, ...). Data transfer authorizations are managed service/client specific. All the clients' communication takes place via EnID's central SSO broker. The SSO broker routes requests to the participating Account Providers, end users always authenticate to the Account Provider that manages their specific account, which is also where they authorize data transfer to a partners' service. Clients specify during authentication calls which master data they request to be authorized by a user for transfer; if the user agrees, the client receives an id_token and a userinfo object as a JSON structure. id_token and userinfo objects also contain the end user's subject identifier ( sub ). netID uses Pairwise Subject Identifiers to derive client specific subject identifiers during authentication requests. The subject identifier is derived using the host portion of the redirect_uri (Callback URL) and used to store data transfer authorization grants in the backend. That means clients of a specific service must use the same callback urls (in terms of host portion) during their authentication calls to avoid duplicated data transfer authorization / different subject identifiers between clients.","title":"General Overview"},{"location":"sso/doc_sso_developer/#claims-und-scopes","text":"Each time a partner initiates a login flow by calling the authorization endpoint he can define which master data the user should authorize to be transferred. For that purpose, the OpenID Connect/OAuth2 standard defines scope and claim mechanisms. Every OpenID Connect request must always request the openid scope. Moreover, the master data required/asked for by the partner can be expressed in the form of essential claims with netID. Once the user authorizes the transfer of that master data, this authorization is stored and not being asked for again unless the users revokes the authorization using the netID Privacy Center. The following claims are supported by netID: gender - the end user's gender given_name - the end user's first name (or names) family_name - the end user's last name birthdate - the end user's date of birth email - the end user's email address email_verified - the verification status of the end user's email address address - physical mailing address, containing informations on postal code (ZIP), city or town, street address and country where the end user's address is located The availability of these claims may, however, vary depending on the end user's account provider; in such cases un-supported claims are ignored and the client needs to handle this accordingly. Important: please note! Claims that are not requested as essential are ignored. The same applies to OIDC scope based claims requests, which are by definition also voluntary.","title":"Claims und Scopes"},{"location":"sso/doc_sso_developer/#example-endpoint-calls","text":"","title":"Example Endpoint Calls"},{"location":"sso/doc_sso_developer/#authorize","text":"Requests to the authorize endpoint initiate the Single Sign-on process, clients identify themselves with their client_id and redirect_uri and specify which claims and scopes are to be requested. Some optional parameters are also supported . The netID Broker endpoint for authorize requests is https://broker.netid.de/authorize . All endpoints and supported OpenID Connect features are also available here: https://broker.netid.de/.well-known/openid-configuration Sample Calls are provided given both easy readable as well as in valid URL encoding. The encoding needs to be used for the redirect_uri as well:","title":"Authorize"},{"location":"sso/doc_sso_developer/#minimum-query","text":"SSO without requesting any additional data https://broker.netid.de/authorize? response_type = code & client_id =[ clientID ] & redirect_uri =[ redirect_uri ] & scope = openid URL encoding https://broker.netid.de/authorize?response_type = code & amp ; client_id =[ clientID ] & amp ; redirect_uri =[ redirect_uri ] & amp ; scope = openid","title":"Minimum Query"},{"location":"sso/doc_sso_developer/#query-for-profile-information","text":"Profile scope expressed in essential claims https://broker.netid.de/authorize? response_type = code & client_id =[ clientID ] & redirect_uri =[ redirect_uri ] & scope = openid & claims ={ \"userinfo\" : { \"birthdate\" : { \"essential\" :true } , \"gender\" : { \"essential\" :true } , \"given_name\" : { \"essential\" :true } , \"family_name\" : { \"essential\" :true } } } URL encoding https://broker.netid.de/authorize?response_type = code & client_id =[ clientID ] & redirect_uri =[ redirect_uri ] & scope = openid & claims ={ \"userinfo\" : { \"birthdate\" : { \"essential\" :true } , \"gender\" : { \"essential\" :true } , \"given_name\" : { \"essential\" :true } , \"family_name\" : { \"essential\" :true }}}","title":"Query for \u201cprofile\u201d information"},{"location":"sso/doc_sso_developer/#token","text":"Token requests are carried out after the callback to the client in order to exchange the code provided for an access token for the userinfo endpoint. It is absolutely necessary that the code used remains unmodified. The netID Broker endpoint for token requests is https://broker.netid.de/token . Credentials need to be provided via basic authentication https://broker.netid.de/token? code =[ code ] & redirect_uri =[ redirect_uri ] & grant_type = authorization_code Example request per curl: curl -v -u [ user:pass ] -X POST https://broker.netid.de/token -H 'content-type: application/x-www-form-urlencoded; charset=UTF-8' -d 'code=[code]&redirect_uri=[redirect_uri]&grant_type=authorization_code'","title":"Token"},{"location":"sso/doc_sso_developer/#userinfo","text":"The access token is used to retrieve userinfo and id_token from the userinfo endpoint. The netID Broker endpoint for userinfo requests is https://broker.netid.de/userinfo .","title":"Userinfo"},{"location":"sso/doc_sso_developer/#timing-and-error-messages","text":"If the authorize request fails, the respective error is provided with the callback to the redirect_uri. With token requests, it's particularly important to ensure that the code provided is identical bit-by-bit to the one received in the callback to the redirect_uri, and that the credentials provided via basic authentication are correct.","title":"Timing and Error Messages"},{"location":"sso/doc_sso_developer/#lifetimes","text":"Authorization codes are only valid for 30 seconds and may only be used once Access token are valid for 15 minutes for use with the userinfo endpoint and may be used multiple times","title":"Lifetimes"},{"location":"sso/doc_sso_developer/#implementation-details","text":"The following request parameters are supported for initiating the SSO process: prompt login for requiring re-authentication of a user during the login process consent for requiring consent to be given again max_age in cases where time of authentication may not be too far in the past login_hint to provide and email address in order to prevent the broker's user interface from being visible to the user and thus directly redirect to the relevant account provider state The value of this parameter is passed through the entire flow transparently and included when calling back to the redirect_uri . It may be used to recognize how authorize request and asynchronous response are associated in the client. The sequence of the calls is summarized as follows: Detailed description of the sequence diagram The end user initiates a process on the client's site that involves the use of netID. At this point, the client generates a netID button for an authorize request and redirects the end user to the SSO broker. The SSO broker validates the client's authorize request. The SSO broker generates a new authorize request and redirects the user to the OpenID provider. For their part, the broker appears to the OpenID provider as a relying party client. The OpenID provider validates the SSO broker's authorize request and displays the login screen to the end user; the user logs in with the account provider. The OpenID provider shows an approval page to the end user on which all the data he or she is asked to allow transfer of is displayed. The end user agrees to provide the requested data. The OpenID provider generates an AuthN Response and redirects to the SSO broker. The SSO broker receives the AuthN Response from the OpenID provider. The SSO broker generates a new AuthN Response and redirects to the client's redirect_uri . The client receives the SSO broker's AuthN Response. The actual data query is initiated. The client requests the access token with the SSO broker using the Auth Code (from the AuthN Response) and the Client Credentials. The SSO broker requests the access token from the OP using the Auth Code (from the AuthN Response) and the Client Credentials taken from the client. The OpenID provider issues an access token, giving it to the SSO broker. The SSO broker uses the access token to generate a new access token, giving this one to the client. The client uses the access token with the SSO broker to request the userinfo object. The SSO broker uses the access token to request the userinfo object from the OpenID provider. The OpenID provider grants the userinfo object to the SSO broker. The SSO broker grants the userinfo object to the client. The client has now received the userinfo object.","title":"Implementation Details"},{"location":"sso/doc_sso_developer/#netid-button","text":"The depiction of the netID button is explained in the styleguide .","title":"netID Button"},{"location":"sso/doc_sso_developer/#best-practices","text":"It is largely up to the relying parties to decide where netID is to be incorporated in clients. Typical cases involve the use of netID as a login or data enrichment mechanism. As a login mechanism, for example, netID may be used like other SSO mechanisms (as well as alongside them) as an authentication alternative, or even used as the sole login method. Whether or not a local account is to be held in addition to the netID account is entirely up to the relying party. netID does not provide a classic session, but the SSO process is available via the authorize process at all times. An email address provided to the broker via a browser will be stored as a 1 st -party cookie; the end user may decide whether to remain logged in with the account provider. The end user's approval for the transfer of master data will be sought only upon the first request for such data, unless the user revokes his or her approval; ideally, this allows SSO flows to be able to run even with interaction from the user. If a relying party would like to also be able to handle authentication of end users independently of netID, it is advisable to ensure that mechanisms for merging or separating accounts are provided for. If local account representations with local credentials exist alongside netID, there should also be support processes for handling them; netID support processes only come into effect in connection with netID accounts themselves. In terms of data enrichment, examples may include using netID during registration processes to make it easier for users to enter information, or as a source for addresses when customers are checking out with their shopping carts online. Whether the data provided is to be used only temporarily or whether it should persist is again left up to the relying parties to freely decide. Each time netID is triggered, the data obtained is up to date in relation to the information currently available to the account provider. With regard to local copies, it may be reasonable to repeatedly request updates and synchronize them. The relying party is to take the principles of data protection into account as they pertain to local data retention. Ideally, data enrichment processes should be initiated in those places where the data is actually needed. This helps to optimize conversion rates while achieving a high degree of data minimization. One thing to be aware of is the verification status of email addresses: if an email address has already been verified with netID, a new request from the relying party to verify the email address is, generally speaking, unnecessary and may cause confusion on the part of the end user. Those netID accounts associated with account providers that are, for their part, email providers, are verified from the outset. If such an email account is deleted, not only does the end user lose the ability to use netID, but all support processes based on that email address will come to nothing.","title":"Best Practices"},{"location":"sso/doc_sso_developer/#security-information","text":"All communication with netID must be secured by TLS. This also applies to all URLs entered in the developer portal. netID exclusively supports the Authorization Code Flow, so that id_token is only transferred in TLS-secured back-end to back-end communication. Currently, the only token signature supported is none.","title":"Security Information"},{"location":"sso/doc_sso_developer/#use-of-sdks","text":"There are a large number of OpenID Connect client libraries available in many different language environments. Below, several examples will be given, along with tips for using them. Many client libraries are listed at https://openid.net/developers/libraries/ , and others are easy to find.","title":"Use of SDKs"},{"location":"sso/doc_sso_developer/#general","text":"Regardless of the choice of environment, it's possible to do the following preliminary experiments: In the developer portal for the partner, create a service, request approval for it, and then create a client for it When choosing which URLs to use, it's possible to generate locally applicable test environments by making an entry in the hosts file of a developer workstation at the endpoints given for service and client and creating and using self-signed certificates. Example \"Entry in hosts\" 127.0.0.1 www.democlient.de Example \"Creating a self-signed certificate\" openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout key.pem -out cert.pem Here, for the Common Name give the host name of the environment you want; so, in this case: www.democlient.de . Using the Client Credentials from the developer portal, the local host entry, and the certificate with the key, it's possible to run through the netID requests. When testing with browsers, it's a good idea to use private windows; otherwise cookies left behind from previous run-throughs may cause confusion. to top","title":"General"},{"location":"sso/doc_sso_developer/#examples","text":"PHP In PHP it's possible to use the package https://github.com/jumbojett/OpenID-Connect-PHP . However, some adjustments are necessary, since netID always uses none for the token signature algorithm in the Authorization Code Flow. Installation according to instructions is no problem. The package derives the redirect_uri from its own URL; here, the position of the script in the path of the web server can either be used as redirect_uri when creating the client or configured accordingly in the web server using rewrite rules. The following minimal diff makes OpenIDConnectClient.php netID-compatible: 844a845,848 > $signature = base64url_decode(array_pop($parts)); > if (false === $signature || '' === $signature) { > throw new OpenIDConnectClientException('Error decoding signature from token'); > } 874,877d877 < // netID has 'none' < case 'none' : < $verified=true; < break; A simple sample client may then look like this: <?php /** * * Copyright MITRE 2012 * * OpenIDConnectClient for PHP5 * Author: Michael Jett <mjett@mitre.org> * * Licensed under the Apache License, Version 2.0 (the \"License\"); you may * not use this file except in compliance with the License. You may obtain * a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the * License for the specific language governing permissions and limitations * under the License. * */ require __DIR__ . '/vendor/autoload.php' ; use Jumbojett\\OpenIDConnectClient ; // specify ClientID und secret! $oidc = new OpenIDConnectClient ( 'https://broker.netid.de/' , 'example-clientid' , 'example-secret' ); // if the default redirect_uri is not to be used, a custom value can be set here: // $oidc->setRedirectURL('https://clientexample.org/callback'); // then however a URL-rewrite is necessary, as for example with mod_rewrite from apache: // RewriteEngine On // RewriteRule \"^callback(.*)\" \"/client_example.php$1\" $oidc -> authenticate (); $sub = $oidc -> getVerifiedClaims ( 'sub' ); ?> <html> <head> <title>Example OpenID Connect Client Use</title> <style> body { font-family: 'Lucida Grande', Verdana, Arial, sans-serif; } </style> </head> <body> <div> netID login successful, the Subject Identifier is: <?php echo $sub ; ?> </div> </body> </html> Javascript One highly recommended JavaScript implementation (node.js) of an OpenID Connect relying party can be found here: https://www.npmjs.com/package/openid-client Java Spring Security examples for Java: GitHub:mitreid-connect/simple-web-app GitHub:eugenp/tutorials/tree/master/spring-security-openid Rust A good OpenID Connect relying party client for Rust can be found here: https://docs.rs/crate/oidc/0.2.0 . Go For go the package GitHub:coreos/go-oidc makes a netID login possible. The package may be installed here: go get github . com / coreos / go - oidc There is no explicit support for entering claims, essential or otherwise. The simple example client netid.go first needs to be edited before Client Credentials, host name, and certificates may be entered, after which it can be run using: go run netid . go","title":"Examples"},{"location":"sso/plugins/","text":"Plugins \u00b6 Magento Plugin \u00b6 Magento Marketplace OXID Plugin \u00b6 OXID Exhange Shopware Plugin \u00b6","title":"Plugins"},{"location":"sso/plugins/#plugins","text":"","title":"Plugins"},{"location":"sso/plugins/#magento-plugin","text":"Magento Marketplace","title":"Magento Plugin"},{"location":"sso/plugins/#oxid-plugin","text":"OXID Exhange","title":"OXID Plugin"},{"location":"sso/plugins/#shopware-plugin","text":"","title":"Shopware Plugin"},{"location":"sso/styleguide/","text":"Styleguide \u00b6 On the partners' side (technical term Relying Party) netID provides a smooth login experience for the user - besides the usual login or registration. This is realized via the netID button. The netID button is - like all other SSO services - clearly separated from the usual login / registration mask. Amplified by the brand specific netID green the netID Button should be clearly perceived as an alternative login possibility. Integration of the login button \u00b6 Different buttons are available for integration in the frontend. netID currently offers four \"Call to Action\" buttons. These are available in three different sizes (small / medium / large). The integration is done via the code snippets provided. If you have additional requirements for a netID \"Call to Action\" button for your app or website, please do not hesitate to contact us. Please indicate the size and the button text you would like to use. We will check your requirements against our specifications and provide you with the corresponding code snippet immediately. Please send your special requirements to: info@enid.eu You want to inform your users - beyond the netID button - with further short information about netID? For this purpose we have created a short description which you can use - please do not change it. Shortened versions of the text are possible. Alternatives are indicated with brackets < > . netID \u2013 <Ihr/Der> Universal-Login f\u00fcrs Internet: <Die pers\u00f6nliche> netID ist der neue europ\u00e4ische Standard f\u00fcr den einfachen, bequemen und sicheren Login bei immer mehr Internetdiensten </auf immer mehr Webseiten> . Nur noch ein Passwort merken, pers\u00f6nliche Daten und Zustimmungen selbst zentral im netID Privacy Center organisieren und so jederzeit den \u00dcberblick behalten! Mehr Infos auf netid.de You are also welcome to link to the netID website. On this page users will find all further information about netID. Furthermore, they can register for netID and log in to their individual netID Privacy Center. https://netid.de netID login buttons \u00b6 CTA text: \"Login mit netID\" \u00b6 #1 Small < button data-button-size = \"small\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Login mit netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = small ] { font-size : 12 px ; line-height : 24 px } </ style ></ button > #2 Medium < button data-button-size = \"medium\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Login mit netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = medium ] { font-size : 14 px ; line-height : 32 px } </ style ></ button > #3 Large < button data-button-size = \"large\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Login mit netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = large ] { font-size : 16 px ; line-height : 40 px } </ style ></ button > CTA text: \"netID Login\" \u00b6 #4 Small < button data-button-size = \"small\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID Login </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = small ] { font-size : 12 px ; line-height : 24 px } </ style ></ button > #5 Medium < button data-button-size = \"medium\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID Login </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = medium ] { font-size : 14 px ; line-height : 32 px } </ style ></ button > #6 Large < button data-button-size = \"large\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID Login </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = large ] { font-size : 16 px ; line-height : 40 px } </ style ></ button > CTA text: \"Mit netID anmelden\" \u00b6 #7 Small < button data-button-size = \"small\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Mit netID anmelden </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = small ] { font-size : 12 px ; line-height : 24 px } </ style ></ button > #8 Medium < button data-button-size = \"medium\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Mit netID anmelden </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = medium ] { font-size : 14 px ; line-height : 32 px } </ style ></ button > #9 Large < button data-button-size = \"large\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Mit netID anmelden </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = large ] { font-size : 16 px ; line-height : 40 px } </ style ></ button > CTA text: \"netID\" \u00b6 #10 Small < button data-button-size = \"small\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = small ] { font-size : 12 px ; line-height : 24 px } </ style ></ button > #11 Medium < button data-button-size = \"medium\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = medium ] { font-size : 14 px ; line-height : 32 px } </ style ></ button > #12 Large < button data-button-size = \"large\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = large ] { font-size : 16 px ; line-height : 40 px } </ style ></ button >","title":"Styleguide"},{"location":"sso/styleguide/#styleguide","text":"On the partners' side (technical term Relying Party) netID provides a smooth login experience for the user - besides the usual login or registration. This is realized via the netID button. The netID button is - like all other SSO services - clearly separated from the usual login / registration mask. Amplified by the brand specific netID green the netID Button should be clearly perceived as an alternative login possibility.","title":"Styleguide"},{"location":"sso/styleguide/#integration-of-the-login-button","text":"Different buttons are available for integration in the frontend. netID currently offers four \"Call to Action\" buttons. These are available in three different sizes (small / medium / large). The integration is done via the code snippets provided. If you have additional requirements for a netID \"Call to Action\" button for your app or website, please do not hesitate to contact us. Please indicate the size and the button text you would like to use. We will check your requirements against our specifications and provide you with the corresponding code snippet immediately. Please send your special requirements to: info@enid.eu You want to inform your users - beyond the netID button - with further short information about netID? For this purpose we have created a short description which you can use - please do not change it. Shortened versions of the text are possible. Alternatives are indicated with brackets < > . netID \u2013 <Ihr/Der> Universal-Login f\u00fcrs Internet: <Die pers\u00f6nliche> netID ist der neue europ\u00e4ische Standard f\u00fcr den einfachen, bequemen und sicheren Login bei immer mehr Internetdiensten </auf immer mehr Webseiten> . Nur noch ein Passwort merken, pers\u00f6nliche Daten und Zustimmungen selbst zentral im netID Privacy Center organisieren und so jederzeit den \u00dcberblick behalten! Mehr Infos auf netid.de You are also welcome to link to the netID website. On this page users will find all further information about netID. Furthermore, they can register for netID and log in to their individual netID Privacy Center. https://netid.de","title":"Integration of the login button"},{"location":"sso/styleguide/#netid-login-buttons","text":"","title":"netID login buttons"},{"location":"sso/styleguide/#cta-text-login-mit-netid","text":"#1 Small < button data-button-size = \"small\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Login mit netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = small ] { font-size : 12 px ; line-height : 24 px } </ style ></ button > #2 Medium < button data-button-size = \"medium\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Login mit netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = medium ] { font-size : 14 px ; line-height : 32 px } </ style ></ button > #3 Large < button data-button-size = \"large\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Login mit netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = large ] { font-size : 16 px ; line-height : 40 px } </ style ></ button >","title":"CTA text: \"Login mit netID\""},{"location":"sso/styleguide/#cta-text-netid-login","text":"#4 Small < button data-button-size = \"small\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID Login </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = small ] { font-size : 12 px ; line-height : 24 px } </ style ></ button > #5 Medium < button data-button-size = \"medium\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID Login </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = medium ] { font-size : 14 px ; line-height : 32 px } </ style ></ button > #6 Large < button data-button-size = \"large\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID Login </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = large ] { font-size : 16 px ; line-height : 40 px } </ style ></ button >","title":"CTA text: \"netID Login\""},{"location":"sso/styleguide/#cta-text-mit-netid-anmelden","text":"#7 Small < button data-button-size = \"small\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Mit netID anmelden </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = small ] { font-size : 12 px ; line-height : 24 px } </ style ></ button > #8 Medium < button data-button-size = \"medium\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Mit netID anmelden </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = medium ] { font-size : 14 px ; line-height : 32 px } </ style ></ button > #9 Large < button data-button-size = \"large\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > Mit netID anmelden </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = large ] { font-size : 16 px ; line-height : 40 px } </ style ></ button >","title":"CTA text: \"Mit netID anmelden\""},{"location":"sso/styleguide/#cta-text-netid","text":"#10 Small < button data-button-size = \"small\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = small ] { font-size : 12 px ; line-height : 24 px } </ style ></ button > #11 Medium < button data-button-size = \"medium\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = medium ] { font-size : 14 px ; line-height : 32 px } </ style ></ button > #12 Large < button data-button-size = \"large\" >< svg xmlns = \"http://www.w3.org/2000/svg\" width = \"40\" height = \"40\" viewBox = \"0 0 40 40\" >< polygon fill = \"#fff\" points = \"19.14 11.43 21.63 8.99 26.33 13.69 39.59 .5 42.01 2.85 26.25 18.61\" ></ polygon >< path fill = \"#fff\" d = \"M38.22,11.17 L36.22,13.17 C37.35,17 37.09,20 33.1,24 L28.45,28.64 L11.55,11.73 L16.23,7.05 C21.23,2.05 25.33,2.45 30.12,5.4 L32,3.53 C26.07,-0.47 20.47,-0.76 14.4,5.31 L0.67,19 L21.15,39.5 L34.87,25.79 C39.93,20.72 40.32,16.3 38.22,11.17 Z\" ></ path ></ svg > < span data-button-text = \"\" > netID </ span >< style > @ font-face { font-family : 'IBM Plex Sans' ; font-style : normal ; font-weight : 600 ; src : local ( 'IBM Plex Sans SemiBold' ), local ( 'IBMPlexSans-SemiBold' ), url ( https :// image . netid . de / ci / netid / global / fonts / ibmplex / IBMPlexSans-SemiBold-webfont . woff ) format ( 'woff' ); unicode-range : U + 0000-00FF , U + 0131 , U + 0152-0153 , U + 02BB-02BC , U + 02C6 , U + 02DA , U + 02DC , U + 2000-206F , U + 2074 , U + 20AC , U + 2122 , U + 2191 , U + 2193 , U + 2212 , U + 2215 , U + FEFF , U + FFFD } button { display : flex ; flex-wrap : nowrap ; justify-content : center ; align-items : center ; width : 100 % ; max-width : 400 px ; margin : auto ; padding : 0 1 em 0 .875 em ; border : 0 solid transparent ; border-radius : 3 px ; background-color : #76b82a ; cursor : pointer ; font-family : 'IBM Plex Sans' , Courier ; color : #fff ; text-decoration : none ; text-transform : none ; white-space : nowrap ; outline : 0 }@ media screen and ( min-width : 768px ) { button { width : auto ; margin : 0 }} button svg { width : 1.25 em ; height : 1.25 em ; margin-right : .438 em } </ style >< style size-style = \"\" > button [ data-button-size = large ] { font-size : 16 px ; line-height : 40 px } </ style ></ button >","title":"CTA text: \"netID\""}]}